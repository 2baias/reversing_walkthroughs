byte, nibble, crumb, bit

<f>:
   0:          mov    eax,DWORD PTR [esp+0x4] ; eax = [b1,b2,b3,b4]
   4:          bswap  eax                     ; swap the byte order --> eax = [b4,b3,b2,b1]
   6:          mov    edx,eax                 ; edx = [b4, b3, b2, b1]

   8:          and    eax,0x0f0f0f0f          ; eax = [0b4_l, 0b3_l, 0b2_l, 0b1_l] (lower nibbles)
   d:          and    edx,0xf0f0f0f0          ; edx = [b4_h0, b3_h0, b2_h0, b1_h0] (upper nibbles)

  13:          shr    edx,0x4                 ; edx = [0b4_h, 0b3_h, 0b2_h, 0b1_h]
  16:          shl    eax,0x4                 ; eax = [b4_l0, b3_l0, b_2l0, b1_l0]

  19:          or     eax,edx                 ; eax = [b4_lb4_h, b3_lb3_h, b2_lb2_h, b1_lb1_h] (swap nibbles)

  1b:          mov    edx,eax                 ; edx = [b4_lb4_h, b3_lb3_h, b2_lb2_h, b1_lb1_h] (copy the above)
                                              ;     = [b4_3210 b4_7654; b3_3210 b3_7654; b2_3210 b2_7654; b1_3210 b1_7654]

; recall that 3 = 0011
;        that c = 1100
;        that 5 = 0101
;        that a = 1010
; we write henceforth b4 = [b4_7, b4_6, b4_5, b4_3, b4_2, b4_1, b4_0] = b4_76543210

  1d:          and    eax,0x33333333          ; eax = [00    b4_10 00    b4_54 00    b3_10 00    b3_54 00    b2_10 00    b2_54 00    b1_10 00    b1_54]
  22:          and    edx,0xcccccccc          ; edx = [b4_32 00    b4_76 00    b3_32 00    b3_76 00    b2_32 00    b2_76 00    b1_32 00    b1_76 00   ]

  28:          shr    edx,0x2                 ; edx = [00    b4_32 00    b4_76 00    b3_32 00    b3_76 00    b2_32 00    b2_76 00    b1_32 00    b1_76]
  2b:          shl    eax,0x2                 ; eax = [b4_10 00    b4_54 00    b3_10 00    b3_54 00    b2_10 00    b2_54 00    b1_10 00    b1_54 00   ]

  2e:          or     eax,edx                 ; eax = [b4_1032 b4_5476 b3_1032 b3_5476 b2_1032 b2_5476 b1_1032 b1_5476]
  30:          mov    edx,eax                 ; edx = [b4_1032 b4_5476 b3_1032 b3_5476 b2_1032 b2_5476 b1_1032 b1_5476]
  
  32:          and    eax,0x55555555          ; eax = [0    b4_0 0    b4_2 0    b4_4 0    b4_6 0    b3_0 0    b3_2 0    b3_4 0    b3_6 0    b2_0 0    b2_2 0    b2_4 0    b2_6 0    b1_0 0    b1_2 0    b1_4 0    b1_6]
  37:          and    edx,0xaaaaaaaa          ; edx = [b4_1 0    b1_3 0    b4_5 0    b4_7 0    b3_1 0    b3_3 0    b3_5 0    b3_7 0    b2_1 0    b2_3 0    b2_5 0    b2_7 0    b1_1 0    b1_3 0    b1_5 0    b1_7 0   ]

  3d:          add    eax,eax                 ; eax = [b4_0 0    b4_2 0    b4_4 0    b4_6 0    b3_0 0    b3_2 0    b3_4 0    b3_6 0    b2_0 0    b2_2 0    b2_4 0    b2_6 0    b1_0 0    b1_2 0    b1_4 0    b1_6 0   ]
  3f:          shr    edx,1                   ; edx = [0    b4_1 0    b1_3 0    b4_5 0    b4_7 0    b3_1 0    b3_3 0    b3_5 0    b3_7 0    b2_1 0    b2_3 0    b2_5 0    b2_7 0    b1_1 0    b1_3 0    b1_5 0    b1_7]

  41:          or     eax,edx                 ; eax = [b4_01234567 b3_01234567 b2_01234567 b1_01234567]
  43:          ret

let's cf to the input [b1_76543210 b2_76543210 b3_76543210 b4_76543210]

ok, so the program just reverses the input as a bit string

; old solution, sadly broken
; eax = [ 0    0    b4_1 b4_0 0    0    b4_5 b4_3 0    0    b3_1 b3_0 0    0    b3_5 b3_3 0    0    b2_1 b2_0 0    0    b2_5 b2_3 0    0    b1_1 b1_0 0    0    b1_5 b1_3]
; edx = [ b4_3 b4_2 0    0    b4_7 b4_6 0    0    b3_3 b3_2 0    0    b3_7 b3_6 0    0    b2_3 b2_2 0    0    b2_7 b2_6 0    0    b1_3 b1_2 0    0    b1_7 b1_6 0    0   ]
                                                                                                                                                                          
; edx = [ 0    0    b4_3 b4_2 0    0    b4_7 b4_6 0    0    b3_3 b3_2 0    0    b3_7 b3_6 0    0    b2_3 b2_2 0    0    b2_7 b2_6 0    0    b1_3 b1_2 0    0    b1_7 b1_6]
; eax = [ b4_1 b4_0 0    0    b4_5 b4_3 0    0    b3_1 b3_0 0    0    b3_5 b3_3 0    0    b2_1 b2_0 0    0    b2_5 b2_3 0    0    b1_1 b1_0 0    0    b1_5 b1_3 0    0   ]
                                                                                                                                                                          
; eax = [ b4_1 b4_0 b4_3 b4_2 b4_5 b4_3 b4_7 b4_6 b3_1 b3_0 b3_3 b3_2 b3_5 b3_3 b3_7 b3_6 b2_1 b2_0 b2_3 b2_2 b2_5 b2_3 b2_7 b2_6 b1_1 b1_0 b1_3 b1_2 b1_5 b1_3 b1_7 b1_6]
; edx = [ b4_1 b4_0 b4_3 b4_2 b4_5 b4_3 b4_7 b4_6 b3_1 b3_0 b3_3 b3_2 b3_5 b3_3 b3_7 b3_6 b2_1 b2_0 b2_3 b2_2 b2_5 b2_3 b2_7 b2_6 b1_1 b1_0 b1_3 b1_2 b1_5 b1_3 b1_7 b1_6]
                                                                                                                                                                          
; eax = [ 0    b4_0 0    b4_2 0    b4_3 0    b4_6 0    b3_0 0    b3_2 0    b3_3 0    b3_6 0    b2_0 0    b2_2 0    b2_3 0    b2_6 0    b1_0 0    b1_2 0    b1_3 0    b1_6]
; edx = [ b4_1 0    b4_3 0    b4_5 0    b4_7 0    b3_1 0    b3_3 0    b3_5 0    b3_7 0    b2_1 0    b2_3 0    b2_5 0    b2_7 0    b1_1 0    b1_3 0    b1_5 0    b1_7 0   ]
                                                                                                                                                                          
; eax = [ b4_0 0    b4_2 0    b4_3 0    b4_6 0    b3_0 0    b3_2 0    b3_3 0    b3_6 0    b2_0 0    b2_2 0    b2_3 0    b2_6 0    b1_0 0    b1_2 0    b1_3 0    b1_6 0   ]
; edx = [ 0    b4_1 0    b4_3 0    b4_5 0    b4_7 0    b3_1 0    b3_3 0    b3_5 0    b3_7 0    b2_1 0    b2_3 0    b2_5 0    b2_7 0    b1_1 0    b1_3 0    b1_5 0    b1_7]
                                                                                                                                                                          
; eax = [ b4_0 b4_1 b4_2 b4_3 b4_3 b4_5 b4_6 b4_7 b3_0 b3_1 b3_2 b3_3 b3_3 b3_5 b3_6 b3_7 b2_2 b2_1 b2_2 b2_3 b2_3 b2_5 b2_6 b2_7 b1_0 b1_1 b1_2 b1_3 b1_3 b1_5 b1_6 b1_7]
